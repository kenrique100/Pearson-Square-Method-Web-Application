package com.api.feedFormulation.model;

import jakarta.persistence.*;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;

import java.util.ArrayList;
import java.util.List;

/**
 * Entity class representing a feed formulation response.
 * This class is used to store details about a specific feed formulation,
 * including its ID, formulation details, and associated ingredients.
 */
@Data
@Entity
@Builder
@AllArgsConstructor
public class FeedResponse {

    /**
     * Unique identifier for the feed response.
     * This field is auto-generated by the database.
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    /**
     * Unique formulation identifier for the feed response.
     * Used to identify and retrieve a specific formulation.
     */
    private String formulationId;

    /**
     * Date of the feed formulation.
     * Represents the date when the formulation was created or last updated.
     */
    private String date;

    /**
     * Quantity of the feed formulation.
     * Represents the total amount of feed in kilograms.
     */
    private double quantity;

    /**
     * Target Crude Protein (CP) value of the feed formulation.
     * Represents the desired percentage of protein in the feed.
     */
    private double targetCpValue;

    /**
     * List of ingredients used in the feed formulation.
     * This is a one-to-many relationship where one feed response can have multiple ingredients.
     *
     * The ingredients are fetched eagerly and are deleted if the feed response is removed.
     */
    @OneToMany(mappedBy = "feedResponse", cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.EAGER)
    private List<Ingredient> ingredients = new ArrayList<>();

    /**
     * Default constructor.
     * Required by JPA for entity instantiation.
     */
    public FeedResponse() {}
}
